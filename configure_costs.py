#!/usr/bin/env python3
"""
Trading Bot Cost Configuration

This script helps you configure the trading bot for different cost levels:
- Cost-Saving Mode: Uses local sentiment analysis, minimal API calls
- Premium Mode: Uses OpenAI sentiment analysis with all features
"""

import os
import sys

def set_cost_saving_mode():
    """Enable cost-saving mode"""
    print("🔧 Configuring Cost-Saving Mode...")
    
    # Update .env file
    env_vars = {
        'USE_LOCAL_SENTIMENT': 'true',
        'SENTIMENT_CACHE_HOURS': '24',  # Cache sentiment for 24 hours
        'REDUCE_API_CALLS': 'true'
    }
    
    update_env_file(env_vars)
    
    print("✅ Cost-Saving Mode Enabled:")
    print("   • Local sentiment analysis (no OpenAI costs)")
    print("   • 24-hour sentiment caching")
    print("   • Reduced API call frequency")
    print("   • Estimated monthly cost: ~$0 for sentiment analysis")
    
def set_premium_mode():
    """Enable premium mode"""
    print("🔧 Configuring Premium Mode...")
    
    env_vars = {
        'USE_LOCAL_SENTIMENT': 'false',
        'SENTIMENT_CACHE_HOURS': '1',   # Cache for 1 hour only
        'REDUCE_API_CALLS': 'false'
    }
    
    update_env_file(env_vars)
    
    print("✅ Premium Mode Enabled:")
    print("   • OpenAI GPT-4o-mini sentiment analysis")
    print("   • 1-hour sentiment caching")
    print("   • Full API functionality")
    print("   • Estimated monthly cost: ~$1-3 for sentiment analysis")

def update_env_file(env_vars):
    """Update .env file with new variables"""
    env_file = '.env'
    
    # Read existing .env file
    existing_vars = {}
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    existing_vars[key] = value
    
    # Update with new variables
    existing_vars.update(env_vars)
    
    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# Trading Bot Configuration\n")
        f.write("# Generated by configure_costs.py\n\n")
        
        for key, value in existing_vars.items():
            f.write(f"{key}={value}\n")
    
    print(f"📝 Updated {env_file} with new configuration")

def show_current_config():
    """Show current configuration"""
    print("📊 Current Configuration:")
    print("=" * 40)
    
    use_local = os.getenv('USE_LOCAL_SENTIMENT', 'false').lower() == 'true'
    cache_hours = os.getenv('SENTIMENT_CACHE_HOURS', '1')
    
    if use_local:
        print("Mode: 💰 Cost-Saving")
        print("Sentiment: Local analysis (FREE)")
    else:
        print("Mode: 🚀 Premium")
        print("Sentiment: OpenAI GPT-4o-mini")
    
    print(f"Cache Duration: {cache_hours} hours")
    
    # Estimate costs
    if use_local:
        print("💳 Estimated Monthly Cost: $0 (sentiment analysis)")
    else:
        print("💳 Estimated Monthly Cost: $1-3 (sentiment analysis)")
    
    print("\nOther API costs (unchanged):")
    print("   • CoinGecko: FREE (rate limited)")
    print("   • Fear & Greed Index: FREE")
    print("   • NewsAPI: FREE tier available")

def main():
    """Main configuration interface"""
    print("🤖 Trading Bot Cost Configuration")
    print("=" * 50)
    
    if len(sys.argv) > 1:
        mode = sys.argv[1].lower()
        if mode == 'cost-saving':
            set_cost_saving_mode()
        elif mode == 'premium':
            set_premium_mode()
        elif mode == 'status':
            show_current_config()
        else:
            print("Usage: python3 configure_costs.py [cost-saving|premium|status]")
        return
    
    # Interactive mode
    show_current_config()
    print("\nAvailable options:")
    print("1. 💰 Cost-Saving Mode (Local sentiment, minimal costs)")
    print("2. 🚀 Premium Mode (OpenAI sentiment, full features)")
    print("3. 📊 Show current status")
    print("4. Exit")
    
    try:
        choice = input("\nEnter your choice (1-4): ").strip()
        
        if choice == '1':
            set_cost_saving_mode()
        elif choice == '2':
            set_premium_mode()
        elif choice == '3':
            show_current_config()
        elif choice == '4':
            print("👋 Goodbye!")
        else:
            print("❌ Invalid choice")
            
    except KeyboardInterrupt:
        print("\n👋 Goodbye!")

if __name__ == "__main__":
    main()